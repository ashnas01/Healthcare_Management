[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2025-03-28 16:01:56.511468",
  "module": "Health Care Management",
  "name": "Registration Invoice Button",
  "script": "frappe.ui.form.on('Patient', {\n    \n    mobile: function(frm) {\n        if (!frm.doc.mobile) return;\n\n        frappe.call({\n            method: 'frappe.client.get_list',\n            args: {\n                doctype: 'Patient',\n                filters: { 'mobile': frm.doc.mobile },\n                fields: ['name', 'patient_name', 'mobile', 'uid']\n            },\n            callback: function(response) {\n                if (response.message.length > 0) {\n                    let table_html = `\n                        <table class=\"table table-bordered\">\n                            <thead>\n                                <tr>\n                                    <th>UID</th>\n                                    <th>Patient Name</th>\n                                    <th>Mobile</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                    `;\n\n                    response.message.sort((a, b) => a.uid - b.uid).forEach(patient => {\n                        table_html += `\n                            <tr>\n                                <td>${patient.uid}</td>\n                                <td><a href=\"/app/patient/${patient.name}\">${patient.patient_name}</a></td>\n                                <td>${patient.mobile}</td>\n                            </tr>\n                        `;\n                    });\n\n                    table_html += `</tbody></table>`;\n\n                    frappe.msgprint({\n                        title: __('Duplicate Patients List'),\n                        message: table_html,\n                        indicator: 'red'\n                    });\n                }\n            }\n        });\n    },\n\n    refresh: function(frm) {\n        if (!frm.is_new()) {\n            frm.add_custom_button('Generate Invoice', function() {\n                let patient_territory = frm.doc.territory;\n                let is_registered = frm.doc.custom_is_registered;\n                let registration_fee = 0;\n                let today = new Date(frappe.datetime.get_today());\n                let expiry_date = frm.doc.custom_consultation_valid_date ? new Date(frm.doc.custom_consultation_valid_date) : null;\n                \n                let action_label = \"Generate Bill\";  // Default label\n                \n                if (expiry_date && expiry_date <= today) {\n                    action_label = \"Generate Token\";  // Change label if expired\n                }\n\n                let dialog = new frappe.ui.Dialog({\n                    title: 'Generate Invoice',\n                    fields: [\n                        { fieldtype: 'Section Break', label: 'Patient Details' },\n                        { fieldtype: 'Data', fieldname: 'patient_name', label: 'Patient Name', default: frm.doc.patient_name, read_only: 1 },\n                        { fieldtype: 'Column Break' },\n                        { fieldtype: 'Data', fieldname: 'registration_period', label: 'Registration Period', default: frm.doc.custom_registration_period, read_only: 1 },\n\n                        { fieldtype: 'Section Break', label: 'Invoice Details' },\n                        {\n                            fieldtype: 'Link',\n                            fieldname: 'doctor_name',\n                            label: 'Doctor Name',\n                            options: 'Healthcare Practitioner',\n                            change: function() {\n                                let doctor = dialog.get_value('doctor_name');\n                                if (doctor) {\n                                    frappe.call({\n                                        method: 'frappe.client.get',\n                                        args: {\n                                            doctype: 'Healthcare Practitioner',\n                                            name: doctor\n                                        },\n                                        callback: function(r) {\n                                            if (r.message) {\n                                                let consultation_fee = parseFloat(r.message.op_consulting_charge || 0);\n                                                dialog.set_value('consultation_charge', consultation_fee);\n                                                updateTable(dialog, parseFloat(dialog.registration_fee || 0), consultation_fee, is_registered,frm);\n                                            }\n                                        }\n                                    });\n\n                                    frappe.call({\n                                        method: 'healthcare_management.services.appointment_api.manage_token',\n                                        args: { practitioner_name: doctor },\n                                        callback: function(r) {\n                                            if (r.message) {\n                                                dialog.set_value('token_number', r.message);\n                                            }\n                                        }\n                                    });\n                                }\n                            }\n                        },\n                        { fieldtype: 'Data', fieldname: 'consultation_charge', label: 'Consultation Charge', read_only: 1 },\n                        { fieldtype: 'Column Break' },\n                        { fieldtype: 'Data', fieldname: 'token_number', label: 'Token Number' },\n                        { fieldtype: 'Link', fieldname: 'mode_of_payment', label: 'Mode of Payment', options: 'Mode of Payment',default:\"Cash\", reqd: 1 },\n\n                        // { fieldtype: 'Section Break', label: 'Invoice Items'},\n                        { fieldtype: 'HTML', fieldname: 'items_table' }\n                    ],\n\n                    primary_action_label: action_label,\n                    primary_action: function(values) {\n                        frappe.confirm(\n                            __('Are you sure you want to generate this bill?'),\n                            function() { // If confirmed\n                                let generate_btn = dialog.get_primary_btn();\n                                generate_btn.prop('disabled', true); // Disable button\n                                generate_btn.html(`<i class=\"fa fa-spinner fa-spin\"></i> Generating...`); // Show loading indicator\n\n                                let reg_fee = parseFloat(dialog.registration_fee || 0);\n                                let consult_fee = parseFloat(values.consultation_charge || 0);\n                                let items = [];\n\n                                if (!is_registered && reg_fee > 0) {\n                                    items.push({\n                                        item_code: \"Registration Fee\",\n                                        qty: 1,\n                                        rate: reg_fee\n                                    });\n                                }\n                                if (consult_fee > 0) {\n                                    items.push({\n                                        item_code: \"Consultation Fee\",\n                                        qty: 1,\n                                        rate: consult_fee\n                                    });\n                                }\n\n                                if (items.length === 0) {\n                                    frappe.msgprint(__('Please select at least one service before generating an invoice'), 'Warning');\n                                    generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                                    return;\n                                }\n\n                                frappe.call({\n                                    method: 'healthcare_management.services.generate_bill_api.create_sales_invoice',\n                                    args: {\n                                        patient: frm.doc.name,\n                                        patient_name: frm.doc.patient_name,\n                                        doctor: values.doctor_name,\n                                        mode_of_payment: values.mode_of_payment,\n                                        items: items\n                                    },\n                                    callback: function(r) {\n                                        if (r.message) {\n                                            frappe.msgprint({\n                                                title: __('Invoice & Payment Created'),\n                                                message: __('Sales Invoice {0} and Payment Entry {1} generated successfully.', \n                                                    [r.message.sales_invoice, r.message.payment_entry]),\n                                                indicator: 'green'\n                                            });\n                                            dialog.hide();\n                                            frm.reload();\n                                        }\n                                        generate_btn.prop('disabled', false).html('Generate Bill'); // Reset button\n                                    }\n                                });\n                            },\n                            function() { // If canceled\n                                console.log(\"Bill generation canceled.\");\n                            }\n                        );\n                        \n                    }\n                });\n                \n\n\n                if (!is_registered) {\n                    frappe.call({\n                        method: 'frappe.client.get_list',\n                        args: {\n                            doctype: 'Registration Fee',\n                            filters: { territory: patient_territory },\n                            fields: ['registration_fee']\n                        },\n                        callback: function(r) {\n                            if (r.message.length > 0) {\n                                registration_fee = parseFloat(r.message[0].registration_fee || 0);\n                                dialog.registration_fee = registration_fee;\n                                updateTable(dialog, registration_fee, 0, is_registered,frm);\n                            }\n                        }\n                    });\n                } else {\n                    dialog.registration_fee = 0;\n                    updateTable(dialog, 0, 0, is_registered,frm);\n                }\n\n                dialog.show();\n            });\n        }\n    }\n});\n\n// Function to update the table with Registration Fee and Consultation Fee\nfunction updateTable(dialog, registration_fee, consultation_fee, is_registered,frm) {\n    let table_html = `\n        <div class=\"table-responsive\">\n            <table class=\"table table-bordered\" style=\"width: 100%;\">\n                <thead>\n                    <tr>\n                        <th>Item</th>\n                        <th style=\"text-align: right;\">Amount (₹)</th>\n                    </tr>\n                </thead>\n                <tbody>\n    `;\n    let today = frappe.datetime.get_today();\n    let expiry_date = frm.doc.custom_consultation_valid_date;\n    if (!is_registered) {\n        table_html += `<tr><td>Registration Fee</td><td style=\"text-align: right;\">₹ ${registration_fee.toFixed(2)}</td></tr>`;\n    }\n    // if (expiry_date && new Date(expiry_date)<=new Date(today)){\n    table_html += `\n        <tr><td>Consultation Fee</td><td style=\"text-align: right;\">₹ ${consultation_fee.toFixed(2)}</td></tr>\n        <tr><td><strong>Total Amount</strong></td><td style=\"text-align: right;\"><strong>₹ ${(registration_fee + consultation_fee).toFixed(2)}</strong></td></tr>\n    `;\n        \n    \n\n    table_html += `</tbody></table></div>`;\n\n    dialog.fields_dict.items_table.$wrapper.html(table_html);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient",
  "enabled": 1,
  "modified": "2025-03-20 14:24:11.069058",
  "module": "Health Care Management",
  "name": "Age Calculation",
  "script": "frappe.ui.form.on(\"Patient\", {\n    refresh: function(frm) {\n        if (frm.doc.custom_free_consultation_period) {\n            calculate_valid_till(frm);\n        }\n    },\n    dob: function(frm) {\n        if (frm.doc.dob) {\n            // Get today's date\n            let today = frappe.datetime.get_today();\n            // Calculate the difference in days between today and DOB\n            let diff_days = frappe.datetime.get_diff(today, frm.doc.dob);\n            // Convert days into years (approximate with 365.25 days per year)\n            let calculated_age = Math.floor(diff_days / 365.25);\n            // Set the age field with the calculated age\n            frm.set_value(\"age_html\", calculated_age);\n        }\n    },\n    custom_free_consultation_period: function(frm) {\n        calculate_valid_till(frm);\n    }\n    // Example renewal button event (to be implemented in future)\n    // renew_consultation: function(frm) {\n    //     frm.set_value(\"custom_consultation_renewal_date\", frappe.datetime.get_today());\n    //     calculate_valid_till(frm);\n    // }\n});\n\n// Function to calculate and update valid till date\nfunction calculate_valid_till(frm) {\n    if (frm.doc.custom_free_consultation_period) {\n        let days = frm.doc.custom_free_consultation_period;\n        \n        // Determine the base date:\n        // - Use renewal date if available,\n        // - Otherwise use creation date if available,\n        // - Otherwise use current date (for new records).\n        let baseDate;\n        if (frm.doc.custom_consultation_renewal_date) {\n            baseDate = new Date(frm.doc.custom_consultation_renewal_date);\n        } else if (frm.doc.creation) {\n            baseDate = new Date(frm.doc.creation);\n        } else {\n            baseDate = new Date();\n        }\n        \n        // Calculate the valid till date\n        let validTillDate = new Date(baseDate);\n        validTillDate.setDate(validTillDate.getDate() + days);\n        \n        // Format the valid till date for display\n        let formattedDate = validTillDate.toLocaleDateString('en-US', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric'\n        });\n        \n        // Set the hidden field value in \"YYYY-MM-DD\" format\n        let formattedHiddenDate = validTillDate.toISOString().split('T')[0];\n        frm.set_value('custom_consultation_valid_date', formattedHiddenDate);\n        frm.refresh_field('custom_consultation_valid_date');\n        \n        // Compare the valid till date with the form open date (current date)\n        let currentDate = new Date();\n        if (validTillDate < currentDate) {\n            // If expired, display the message in red\n            frm.fields_dict.custom_valid_till.$wrapper.html(\n                `<span style=\"color:red;\">Consultation Expired on: ${formattedDate}</span>`\n            );\n            // Show an alert on the bottom right that the consultation has expired\n            frappe.show_alert({\n                message: `Consultation expired on: ${formattedDate}`,\n                indicator: 'red'\n            }, 5);\n        } else {\n            // Otherwise, display normally\n            frm.fields_dict.custom_valid_till.$wrapper.html(\n                `Consultation Valid Till: ${formattedDate}`\n            );\n        }\n        frm.refresh_field('custom_valid_till');\n    } else {\n        // Clear fields if no consultation period is provided\n        frm.set_value('custom_consultation_valid_date', null);\n        frm.refresh_field('custom_consultation_valid_date');\n        frm.fields_dict.custom_valid_till.$wrapper.html(\"\");\n        frm.refresh_field('custom_valid_till');\n    }\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2025-03-21 09:04:35.950746",
  "module": "Health Care Management",
  "name": "Print Invoice Selector",
  "script": "frappe.ui.form.on('Sales Invoice', {\n    onload: function(frm) {\n        // Check if invoice contains Lab Test or Pharmacy items\n        let has_lab_test = false;\n        let has_pharmacy = false;\n\n        frm.doc.items.forEach(item => {\n            if (item.item_group && item.item_group.includes(\"Laboratory\")) {\n                has_lab_test = true;\n            }\n            if (item.item_group && item.item_group.includes(\"Medications\")) {\n                has_pharmacy = true;\n            }\n        });\n\n        // Store the selected print format\n        let selected_print_format = \"\";\n\n        if (has_lab_test && !has_pharmacy) {\n            selected_print_format = \"Lab Test Invoice\";\n        } else if (has_pharmacy && !has_lab_test) {\n            selected_print_format = \"Pharmacy Invoice\";\n        } else if (has_lab_test && has_pharmacy) {\n            frappe.msgprint(\"Please create separate invoices for Lab Tests and Pharmacy items.\");\n            frappe.throw(\"Sales Invoice must contain either only Lab Test items or only Pharmacy items.\");\n        }\n\n        // Override the print function\n        frm.page.btn_secondary.find('.btn-print').off('click').on('click', function () {\n            if (selected_print_format) {\n                frappe.ui.form.trigger('Sales Invoice', 'print', selected_print_format);\n            } else {\n                frappe.msgprint(\"No print format selected. Please check the items.\");\n            }\n        });\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Pharmacy Billing",
  "enabled": 1,
  "modified": "2025-03-27 11:17:49.024625",
  "module": "Health Care Management",
  "name": "Pharmacy Billing Conditions",
  "script": "frappe.ui.form.on('Pharmacy Billing', {\n    healthcare_practitioner: function(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => {\n                    console.error(\"Error fetching department:\", err);\n                });\n        }\n    },\n    refresh: function(frm) {\n        frm.fields_dict.medicines.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n        frm.fields_dict.medicines.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: {\n                    \"item_group\": \"Medications\"  // Show only pharmacy-related items\n                }\n            };\n        };\n    },\n    \n    validate: function (frm) {\n        let required_main_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        let required_row_fields = [\"item_code\", \"qty\", \"mrp\", \"amount\",\"gst_\"];\n        let missing_fields = [];\n\n        // *Check Main Form Fields**\n        required_main_fields.forEach(field => {\n            if (!frm.doc[field]) {\n                missing_fields.push(__(frappe.meta.get_label(frm.doctype, field, frm.doc.name)));\n            }\n        });\n\n        // *Check Each Row in Medicines Table**\n        if (frm.doc.medicines && frm.doc.medicines.length > 0) {\n            for (let row of frm.doc.medicines) {\n                for (let field of required_row_fields) {\n                    if (!row[field]) {\n                        frappe.msgprint(__(\"Please fill all required fields in the medicines table before saving.\"));\n                        frappe.validated = false;\n                        return;\n                    }\n                }\n            }\n        }\n\n        // *Stop Saving If Any Main Field is Missing**\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" + missing_fields.join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n        \n    },\n    \n    before_print: function(frm) {\n        let item_count = frm.doc.medicines.length; // Adjust for your item field\n\n        // Choose print format based on item count\n        let print_format = item_count > 10 ? \"Long Invoice Format\" : \"Pharmacy Inv\";\n\n        // Set the selected print format before printing\n        frm.meta.default_print_format = print_format;\n    },\n    \n});\n\nfrappe.ui.form.on('Pharmaceuticals', {\n    // Recalculate totals whenever the medicines table is modified\n    medicines_add: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        // Get all existing medicines in the child table\n        let medicines = frm.doc.medicines || [];\n\n        // Check for duplicate item_code\n        let is_duplicate = medicines.some((med) => med.item_code === row.item_code && med.item_name !== row.item_name);\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This medicine is already added to the bill. Please update the quantity instead.'));\n            \n            // Remove the duplicate row\n            frappe.model.clear_table(cdt, cdn);\n            frm.refresh_field(\"medicines\");\n            return;\n        }\n\n        calculate_totals(frm);\n    },\n    \n    medicines_remove: function(frm) {\n        calculate_totals(frm);\n    },\n    \n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        let medicines = frm.doc.medicines || [];\n\n        // Check for duplicate item_code (excluding the current row)\n        let is_duplicate = medicines.some(med => med.item_code === row.item_code && med.name !== row.name);\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This medicine is already added. Update the quantity instead.'));\n            \n            // Remove the duplicate row\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            frm.refresh_field(\"medicines\");\n            return;\n        }\n\n        fetch_item_details(frm, cdt, cdn, \"item_code\", row.item_code);\n    },\n    \n    qty: function (frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let tablets_per_strip = row.tablets_per_strip ?? 1;\n        if (tablets_per_strip > 0) {\n            frappe.model.set_value(cdt, cdn, \"strips\", Math.floor(row.qty / tablets_per_strip) || 0);\n            frappe.model.set_value(cdt, cdn, \"nos\", row.qty % tablets_per_strip || 0);\n        } else {\n            frappe.model.set_value(cdt, cdn, \"strips\", 0);\n            frappe.model.set_value(cdt, cdn, \"nos\", row.qty);\n        }\n\n        // **Calculate GST Per Unit**\n        let base_price = row.custom_original_mrp || 0;  // Ensure a valid base price\n        let gst_ = row.gst_ || 0;\n        let tax_per_unit = (base_price * gst_) / 100;\n        let final_price = base_price + tax_per_unit;  // Rate after GST\n        \n        // **Calculate GST Breakdown**\n        let cgst_amount = ((tax_per_unit / 2) * row.qty) || 0;\n        let sgst_amount = ((tax_per_unit / 2) * row.qty) || 0;\n        let total_tax = (tax_per_unit * row.qty) || 0;\n\n        // **Calculate Final Values**\n        let amount_before_tax = base_price * row.qty;\n        let amount_after_tax = final_price * row.qty;\n\n        // **Apply Discount**\n        let discount_rate = row.discount_ || 0;\n        let discount_amount = (amount_before_tax * discount_rate) / 100;\n        let total_after_discount = amount_before_tax - discount_amount;\n\n        // **Recalculate GST on Discounted Amount**\n        let total_tax_after_discount = (total_after_discount * gst_) / 100;\n        let final_amount = total_after_discount + total_tax_after_discount;\n        let new_cgst = total_tax_after_discount / 2;\n        let new_sgst = total_tax_after_discount / 2;\n\n        // **Update Values in Form**\n        frappe.model.set_value(cdt, cdn, \"rate\", final_price);\n        frappe.model.set_value(cdt, cdn, \"amount_before_tax\", amount_before_tax);\n        frappe.model.set_value(cdt, cdn, \"cgst_amount\", new_cgst);\n        frappe.model.set_value(cdt, cdn, \"sgst_amount\", new_sgst);\n        frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax_after_discount);\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_amount);\n\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    gst_: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n    \n        if (!row.custom_original_mrp || row.gst_ === undefined) {\n            console.warn(\"Missing Original MRP or GST for:\", row.item_code);\n            return;\n        }\n    \n        try {\n            // **Always Use Original MRP for Calculation**\n            let base_price = row.custom_original_mrp;  \n            let tax_per_unit = (base_price * row.gst_) / 100;\n            let new_mrp = base_price + tax_per_unit;  // Increase GST from original MRP\n    \n            /// **Calculate GST Per Unit**\n            let cgst_amount = (tax_per_unit / 2) * row.qty;\n            let sgst_amount = (tax_per_unit / 2) * row.qty;\n            let total_tax = tax_per_unit * row.qty;\n            let final_total = new_mrp * row.qty;  // Total amount including GST\n    \n            /// **Update Fields**\n            frappe.model.set_value(cdt, cdn, \"mrp\", new_mrp);\n            frappe.model.set_value(cdt, cdn, \"cgst_amount\", cgst_amount);\n            frappe.model.set_value(cdt, cdn, \"sgst_amount\", sgst_amount);\n            frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax);\n            frappe.model.set_value(cdt, cdn, \"amount\", final_total);\n    \n        } catch (error) {\n            console.error(\"Error updating GST values:\", error);\n        }\n    \n        // **Recalculate Totals for Entire Bill**\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    discount_: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let base_amount = row.amount_before_tax || 0;  // Base amount before GST\n        let discount_amount = (base_amount * (row.discount_ || 0)) / 100;\n        let total_amount = base_amount - discount_amount;\n\n        /// **Recalculate GST After Discount**\n        let gst_rate = row.gst_ || 0;\n        let total_tax = (total_amount * gst_rate) / 100;\n        \n        let cgst_amount = total_tax / 2;\n        let sgst_amount = total_tax / 2;\n\n        /// **Final Amount Calculation**\n        let final_total = total_amount + total_tax;\n\n        /// **Update Values in Form**\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"total_amount\", total_amount);\n        frappe.model.set_value(cdt, cdn, \"cgst_amount\", cgst_amount);\n        frappe.model.set_value(cdt, cdn, \"sgst_amount\", sgst_amount);\n        frappe.model.set_value(cdt, cdn, \"tax_amount\", total_tax);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_total);\n\n        frm.refresh_field(\"medicines\");\n        calculate_totals(frm);\n    },\n    \n    medicines_add: function (frm) {\n        let medicines = frm.doc.medicines;\n        \n        // Ensure there's a previous row before validation\n        if (medicines.length > 1) {\n            let last_row_index = medicines.length - 2;\n            let last_row = medicines[last_row_index]; // Get the previous row\n            \n            if (!last_row) {\n                console.warn(\"Last row not found. Skipping validation.\");\n                return;\n            }\n\n            let required_fields = [\"item_code\", \"qty\", \"mrp\", \"amount\"];\n            for (let field of required_fields) {\n                if (!last_row[field] || (field === \"qty\" && last_row[field] <= 0)) {\n                    frappe.msgprint(__(\"Please complete the previous row before adding a new one.\"));\n                    \n                    // Remove the added row after a slight delay\n                    setTimeout(() => {\n                        if (frm.doc.medicines.length > last_row_index + 1) {\n                            frm.doc.medicines.splice(last_row_index + 1, 1);  \n                            frm.refresh_field(\"medicines\");\n                        }\n                    }, 100);\n\n                    return;\n                }\n            }\n        }\n    },\n});\n\nfunction fetch_item_details(frm, cdt, cdn, field, value) {\n    if (value) {\n        frappe.call({\n            method: 'frappe.client.get',\n            args: {\n                doctype: \"Item\",\n                name: value\n            },\n            callback: function(r) {\n                if (r.message) {\n                    let row = locals[cdt][cdn];\n\n                    // Set Item Details\n                    frappe.model.set_value(cdt, cdn, \"item_code\", value);\n                    frappe.model.set_value(cdt, cdn, \"item_name\", r.message.item_name || \"\");\n                    frappe.model.set_value(cdt, cdn, \"hsn\", r.message.gst_hsn_code || \"\");\n                    frappe.model.set_value(cdt, cdn, \"tablets_per_strip\", r.message.weight_per_unit ?? 1);\n                    frappe.model.set_value(cdt, cdn, \"mrp\", r.message.valuation_rate || 0);\n                    \n                    // **Store Original MRP (Only if not set)**\n                    if (!row.custom_original_mrp) {\n                        frappe.model.set_value(cdt, cdn, \"custom_original_mrp\", r.message.valuation_rate);\n                    }\n                    \n                    \n                    frappe.call({\n                        method: 'frappe.client.get_value',\n                        args: {\n                            doctype: \"Item\",\n                            fieldname: \"taxes\",  // Fetch the entire child table field\n                            filters: { name: value }\n                        },\n                        callback: function(res) {\n                            if (res.message && res.message.taxes) {\n                                let taxes_data = res.message.taxes; // Get the \"taxes\" JSON\n                    \n                                if (taxes_data.length > 0) {\n                                    let tax_template = taxes_data[0].item_tax_template;\n                    \n                                    if (tax_template) {\n                                        frappe.call({\n                                            method: 'frappe.client.get_value',\n                                            args: {\n                                                doctype: \"Item Tax Template\",\n                                                fieldname: \"gst_rate\",\n                                                filters: { name: tax_template }\n                                            },\n                                            callback: function(res2) {\n                                                if (res2.message && res2.message.gst_rate !== undefined) {\n                                                    frappe.model.set_value(cdt, cdn, \"gst_\", res2.message.gst_rate);\n                                                } else {\n                                                    frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                                                }\n                                            }\n                                        });\n                                    } else {\n                                        frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                                    }\n                                } else {\n                                    frappe.model.set_value(cdt, cdn, \"gst_\", 0);\n                                }\n                            }\n                        }\n                    });\n\n                    // Fetch batch details\n                    fetch_batch_details(frm, cdt, cdn, value);\n                } else {\n                    frappe.msgprint(__('Item details not found!'));\n                }\n            }\n        });\n    }\n}\n\n// Function to Fetch Batch Details\nfunction fetch_batch_details(frm, cdt, cdn, item_code) {\n    console.log(\"fetch_batch_details:\",item_code)\n    frappe.db.get_value(\"Batch\", { \"item\": item_code }, [\"batch_id\", \"expiry_date\"])\n        .then(r => {\n            console.log(r.message)\n            if (r.message) {\n                frappe.model.set_value(cdt, cdn, \"batch\", r.message.batch_id || \"\");\n                frappe.model.set_value(cdt, cdn, \"expiry_date\", r.message.expiry_date || \"\");\n               \n                // frm.refresh_field(\"medicines\");\n            } else {\n                frappe.msgprint(__('Batch details not found!'));\n            }\n        }).catch(err => {\n            console.error('Error fetching batch:', err);\n        });\n}\n\nfunction calculate_totals(frm) {\n    let total_qty = 0;\n    let total_before_tax = 0;\n    let total_tax = 0;\n    let total_cgst = 0;\n    let total_sgst = 0;\n    let grand_total = 0;\n    let total_items = 0;\n    let saved_amount = 0;\n\n    if (frm.doc.medicines && frm.doc.medicines.length > 0) {\n        total_items = frm.doc.medicines.length; // Count total rows in medicines table\n        \n        frm.doc.medicines.forEach(row => {\n            total_qty += row.qty || 0;\n            total_before_tax += row.amount_before_tax || 0;\n            total_cgst += row.cgst_amount || 0;\n            total_sgst += row.sgst_amount || 0;\n            total_tax += row.tax_amount || 0;\n            grand_total += row.amount || 0;\n            saved_amount += row.discounted_amount || 0;\n            \n        });\n    }\n\n    frm.set_value(\"total_quantity\", total_qty);\n    frm.set_value(\"custom_sub_total_before_tax\", total_before_tax);\n    frm.set_value(\"custom_total_cgst\", total_cgst);\n    frm.set_value(\"custom_total_sgst\", total_sgst);\n    frm.set_value(\"custom_total_tax_amount\", total_tax);\n    frm.set_value(\"total_amount\", grand_total);\n    frm.set_value(\"custom_total_item\", total_items); // Set total number of medicines in bill\n    frm.set_value(\"saved_amount\", saved_amount);\n    \n    let rounded_total = Math.round(frm.doc.total_amount || 0);\n        frm.set_value(\"custom_rounded_total_amount\", rounded_total);\n\n        // Use the whitelisted function\n        frappe.call({\n            method: \"healthcare_management.services.money_in_words_api.money_in_words_api\",  // Change `healthcare_management` to your app name\n            args: { amount: rounded_total },\n            callback: function(r) {\n                if (r.message) {\n                    frm.set_value(\"custom_amount_in_words\", r.message);\n                }\n            }\n        });\n\n    frm.refresh_fields([\"total_quantity\", \"total_amount\", \"custom_total_tax_amount\", \"custom_total_cgst\", \"custom_total_sgst\", \"custom_sub_total_before_tax\",\"custom_total_item\",\"saved_amount\",\"custom_rounded_total_amount\"]);\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Laboratory Bill",
  "enabled": 1,
  "modified": "2025-03-27 11:37:02.483974",
  "module": "Health Care Management",
  "name": "Laboratory Billing Conditions",
  "script": "frappe.ui.form.on('Laboratory Bill', {\n    healthcare_practitioner: function(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => {\n                    console.error(\"Error fetching department:\", err);\n                });\n        }\n    },\n\n    refresh: function(frm) {\n        frm.fields_dict.lab_items.grid.get_field(\"item_code\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: { \"item_group\": \"Laboratory\" }\n            };\n        };\n        frm.fields_dict.lab_items.grid.get_field(\"item_name\").get_query = function(doc, cdt, cdn) {\n            return {\n                filters: { \"item_group\": \"Laboratory\" }\n            };\n        };\n    },\n\n    validate: function(frm) {\n        let required_main_fields = [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"];\n        let missing_fields = [];\n\n        required_main_fields.forEach(field => {\n            if (!frm.doc[field]) {\n                missing_fields.push(__(frappe.meta.get_label(frm.doctype, field, frm.doc.name)));\n            }\n        });\n\n        if (frm.doc.lab_items && frm.doc.lab_items.length > 0) {\n            for (let row of frm.doc.lab_items) {\n                if (!row.item_code || !row.qty || !row.rate || !row.amount) {\n                    frappe.msgprint(__(\"Please fill all required fields in the lab_items table before saving.\"));\n                    frappe.validated = false;\n                    return;\n                }\n            }\n        }\n\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" + missing_fields.join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n    }\n});\n\nfrappe.ui.form.on('Lab Items', {\n    lab_items_add: function(frm) {\n        calculate_totals(frm);\n    },\n\n    lab_items_remove: function(frm) {\n        calculate_totals(frm);\n    },\n\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let lab_items = frm.doc.lab_items || [];\n        let is_duplicate = lab_items.some(labt => labt.item_code === row.item_code && labt.name !== row.name);\n\n        if (is_duplicate) {\n            frappe.msgprint(__('This item is already added. Update the quantity instead.'));\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            frm.refresh_field(\"lab_items\");\n            return;\n        }\n\n        fetch_item_details(frm, cdt, cdn, row.item_code);\n    },\n\n    qty: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let amount_before_discount = (row.qty || 0) * (row.rate || 0);\n        frappe.model.set_value(cdt, cdn, \"amount_before_discount\", amount_before_discount);\n\n        let discount_amount = (amount_before_discount * (row.discount_ || 0)) / 100;\n        let final_amount = amount_before_discount - discount_amount;\n\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_amount);\n\n        frm.refresh_field(\"lab_items\");\n        calculate_totals(frm);\n    },\n\n    discount_: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        let amount_before_discount = row.amount_before_discount || 0;\n        let discount_amount = (amount_before_discount * (row.discount_ || 0)) / 100;\n        let final_amount = amount_before_discount - discount_amount;\n\n        frappe.model.set_value(cdt, cdn, \"discounted_amount\", discount_amount);\n        frappe.model.set_value(cdt, cdn, \"amount\", final_amount);\n\n        frm.refresh_field(\"lab_items\");\n        calculate_totals(frm);\n    }\n});\n\nfunction fetch_item_details(frm, cdt, cdn, item_code) {\n    if (!item_code) return;\n\n    frappe.db.get_value(\"Item\", { \"item_code\": item_code }, [\"item_name\", \"valuation_rate\"])\n        .then(r => {\n            if (r.message) {\n                frappe.model.set_value(cdt, cdn, \"item_name\", r.message.item_name || \"\");\n                frappe.model.set_value(cdt, cdn, \"rate\", r.message.valuation_rate || \"\");\n            } else {\n                frappe.msgprint(__('Item details not found!'));\n            }\n        }).catch(err => {\n            console.error('Error fetching item:', err);\n        });\n}\n\nfunction calculate_totals(frm) {\n    let total_qty = 0;\n    let grand_total = 0;\n    let total_items = 0;\n    let saved_amount = 0;\n\n    if (frm.doc.lab_items && frm.doc.lab_items.length > 0) {\n        total_items = frm.doc.lab_items.length;\n\n        frm.doc.lab_items.forEach(row => {\n            total_qty += row.qty || 0;\n            grand_total += row.amount || 0;\n            saved_amount += row.discounted_amount || 0;\n        });\n    }\n\n    frm.set_value(\"total_quantity\", total_qty);\n    frm.set_value(\"total_amount\", grand_total);\n    frm.set_value(\"total_items\", total_items);\n    frm.set_value(\"saved_amount\", saved_amount);\n\n    let rounded_total = Math.round(frm.doc.total_amount || 0);\n    frm.set_value(\"custom_rounded_total_amount\", rounded_total);\n\n    frappe.call({\n        method: \"healthcare_management.services.money_in_words_api.money_in_words_api\",\n        args: { amount: rounded_total },\n        callback: function(r) {\n            if (r.message) {\n                frm.set_value(\"custom_amount_in_words\", r.message);\n            }\n        }\n    });\n\n    frm.refresh_fields([\"total_quantity\", \"total_amount\", \"total_items\", \"saved_amount\", \"custom_rounded_total_amount\"]);\n}\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Patient Appointment",
  "enabled": 1,
  "modified": "2025-03-03 16:44:34.897491",
  "module": "Health Care Management",
  "name": "Token Number Implementation",
  "script": "frappe.ui.form.on('Patient Appointment', {\n    before_save: function(frm) {\n        if (!frm.doc.custom_token_number && frm.doc.appointment_date) {\n            frappe.call({\n                method: \"frappe.client.get_list\",\n                args: {\n                    doctype: \"Patient Appointment\",\n                    filters: { appointment_date: frm.doc.appointment_date },\n                    fields: [\"custom_token_number\"],\n                    order_by: \"custom_token_number desc\",\n                    limit_page_length: 1\n                },\n                callback: function(response) {\n                    let last_token = response.message.length ? response.message[0].custom_token_number : 0;\n                    frm.set_value('custom_token_number', (last_token || 0) + 1);\n                }\n            });\n        }\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Healthcare Practitioner",
  "enabled": 1,
  "modified": "2025-03-05 11:49:36.558343",
  "module": "Health Care Management",
  "name": "Reset Normal Token",
  "script": "frappe.ui.form.on('Healthcare Practitioner', {\n    refresh: function(frm) {\n        // Add click event to the button\n        frm.add_custom_button(__('Reset Token'), function() {\n            frappe.call({\n                method: 'healthcare_management.services.api.reset_doctor_token',\n                args: {\n                    doctor: frm.doc.practitioner_name\n                },\n                callback: function(r) {\n                    if (!r.exc) {\n                        frappe.msgprint(__('Token reset successfully: ' + r.message));\n                        frm.reload_doc(); // Refresh form to update token history\n                    }\n                }\n            });\n        }, __(\"Actions\"));\n    }\n});\n",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Clinical Procedure Bill",
  "enabled": 1,
  "modified": "2025-03-27 11:51:56.272079",
  "module": "Health Care Management",
  "name": "Clinical Procedure Billing Conditions",
  "script": "frappe.ui.form.on('Clinical Procedure Bill', {\n    healthcare_practitioner: function(frm) {\n        if (frm.doc.healthcare_practitioner) {\n            frappe.db.get_value(\"Healthcare Practitioner\", frm.doc.healthcare_practitioner, \"department\")\n                .then(r => {\n                    if (r.message) {\n                        frm.set_value(\"department\", r.message.department || \"\");\n                    }\n                }).catch(err => console.error(\"Error fetching department:\", err));\n        }\n    },\n\n    refresh: function(frm) {\n        // Restrict item selection to \"Medical Procedures\"\n        [\"item_code\", \"item_name\"].forEach(field => {\n            frm.fields_dict.nursing_items.grid.get_field(field).get_query = function() {\n                return { filters: { \"item_group\": \"Medical Procedures\" } };\n            };\n        });\n    },\n\n    validate: function(frm) {\n        let missing_fields = [];\n\n        // Required fields at form level\n        [\"patient_name\", \"healthcare_practitioner\", \"total_amount\"].forEach(field => {\n            if (!frm.doc[field]) {\n                missing_fields.push(__(frappe.meta.get_label(frm.doctype, field, frm.doc.name)));\n            }\n        });\n\n        // Required fields in the child table (nursing_items)\n        if (frm.doc.nursing_items && frm.doc.nursing_items.length > 0) {\n            for (let row of frm.doc.nursing_items) {\n                for (let field of [\"item_code\", \"qty\", \"rate\", \"amount\"]) {\n                    if (!row[field]) {\n                        frappe.msgprint(__(\"Please fill all required fields in the nursing_items table before saving.\"));\n                        frappe.validated = false;\n                        return;\n                    }\n                }\n            }\n        }\n\n        // Stop saving if main form fields are missing\n        if (missing_fields.length > 0) {\n            frappe.msgprint({\n                title: __(\"Missing Fields\"),\n                message: __(\"Please fill in the following fields before saving:\") + \"<br><b>\" + missing_fields.join(\", \") + \"</b>\",\n                indicator: \"red\"\n            });\n            frappe.validated = false;\n        }\n    },\n});\n\nfrappe.ui.form.on('Nursing Items', {\n    nursing_items_add: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n        let nursing_items = frm.doc.nursing_items || [];\n\n        // Ensure the previous row is complete before adding a new one\n        if (nursing_items.length > 1) {\n            let last_row = nursing_items[nursing_items.length - 2];\n            if (!last_row || ![\"item_code\", \"qty\", \"rate\", \"amount\"].every(field => last_row[field])) {\n                frappe.msgprint(__(\"Please complete the previous row before adding a new one.\"));\n                setTimeout(() => {\n                    frm.doc.nursing_items.splice(nursing_items.length - 1, 1);\n                    frm.refresh_field(\"nursing_items\");\n                }, 100);\n                return;\n            }\n        }\n\n        // Prevent duplicate item entries\n        if (nursing_items.some(n => n.item_code === row.item_code && n.name !== row.name)) {\n            frappe.msgprint(__('This item is already added. Please update the quantity instead.'));\n            frappe.model.clear_table(cdt, cdn);\n            frm.refresh_field(\"nursing_items\");\n            return;\n        }\n\n        calculate_totals(frm);\n    },\n\n    nursing_items_remove: function(frm) {\n        calculate_totals(frm);\n    },\n\n    item_code: function(frm, cdt, cdn) {\n        let row = locals[cdt][cdn];\n\n        // Check for duplicate items\n        if (frm.doc.nursing_items.some(cli => cli.item_code === row.item_code && cli.name !== row.name)) {\n            frappe.msgprint(__('This item is already added. Update the quantity instead.'));\n            frappe.model.set_value(cdt, cdn, \"item_code\", \"\");\n            frappe.model.set_value(cdt, cdn, \"item_name\", \"\");\n            frm.refresh_field(\"nursing_items\");\n            return;\n        }\n\n        fetch_item_details(frm, cdt, cdn, row.item_code);\n    },\n\n    qty: function(frm, cdt, cdn) {\n        update_amounts(frm, cdt, cdn);\n    },\n\n    discount_: function(frm, cdt, cdn) {\n        update_amounts(frm, cdt, cdn);\n    }\n});\n\n/**\n * Fetch item details from Item master\n */\nfunction fetch_item_details(frm, cdt, cdn, item_code) {\n    if (!item_code) return;\n\n    frappe.db.get_value(\"Item\", { \"item_code\": item_code }, [\"item_code\", \"item_name\", \"valuation_rate\"])\n        .then(r => {\n            if (r.message) {\n                frappe.model.set_value(cdt, cdn, \"item_code\", r.message.item_code);\n                frappe.model.set_value(cdt, cdn, \"item_name\", r.message.item_name);\n                frappe.model.set_value(cdt, cdn, \"rate\", r.message.valuation_rate || 0);\n            } else {\n                frappe.msgprint(__('Item details not found!'));\n            }\n        }).catch(err => console.error('Error fetching item:', err));\n}\n\n/**\n * Recalculate amounts based on qty and discount\n */\nfunction update_amounts(frm, cdt, cdn) {\n    let row = locals[cdt][cdn];\n\n    let base_amount = (row.qty || 0) * (row.rate || 0);\n    frappe.model.set_value(cdt, cdn, \"amount_before_discount\", base_amount);\n\n    let discounted_amount = (base_amount * (row.discount_ || 0)) / 100;\n    let final_amount = base_amount - discounted_amount;\n\n    frappe.model.set_value(cdt, cdn, \"discounted_amount\", discounted_amount);\n    frappe.model.set_value(cdt, cdn, \"amount\", final_amount);\n\n    frm.refresh_field(\"nursing_items\");\n    calculate_totals(frm);\n}\n\n/**\n * Calculate total amounts and update the form\n */\nfunction calculate_totals(frm) {\n    let total_qty = 0, grand_total = 0, total_items = 0, saved_amount = 0;\n\n    if (frm.doc.nursing_items && frm.doc.nursing_items.length > 0) {\n        total_items = frm.doc.nursing_items.length;\n        frm.doc.nursing_items.forEach(row => {\n            total_qty += row.qty || 0;\n            grand_total += row.amount || 0;\n            saved_amount += row.discounted_amount || 0;\n        });\n    }\n\n    let rounded_total = Math.round(grand_total);\n\n    frm.set_value({\n        \"total_quantity\": total_qty,\n        \"total_amount\": grand_total,\n        \"total_items\": total_items,\n        \"saved_amount\": saved_amount,\n        \"rounded_total_amount\": rounded_total\n    });\n\n    // Convert total amount to words\n    frappe.call({\n        method: \"healthcare_management.services.money_in_words_api.money_in_words_api\",  \n        args: { amount: rounded_total },\n        callback: function(r) {\n            if (r.message) {\n                frm.set_value(\"amount_in_words\", r.message);\n            }\n        }\n    });\n\n    frm.refresh_fields([\"total_quantity\", \"total_amount\", \"total_items\", \"saved_amount\", \"rounded_total_amount\"]);\n}\n",
  "view": "Form"
 }
]